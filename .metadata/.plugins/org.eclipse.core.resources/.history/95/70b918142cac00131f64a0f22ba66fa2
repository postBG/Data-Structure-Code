package test;

import java.io.*;

public class testMakenumberonlyString {

	public static void main(String[] args) {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		String input;
		try {
			input = br.readLine();
			
			input=input.replace(" ", "");
			
			StringBuffer num1=new StringBuffer(120); 
			StringBuffer num2=new StringBuffer(120);
			StringBuffer oper=new StringBuffer(4);
			StringBuffer result=new StringBuffer(240);
			
			GetBigInteger(num1, num2, oper, input);
		
			MakeNumberOnlyString(num1);
			MakeNumberOnlyString(num2);
			
			String absonum1=num1.toString();
			String absonum2=num2.toString();
			
			System.out.print("num1:");
			System.out.println(absonum1);
			System.out.print("num2:");
			System.out.println(absonum2);
			
			ChangeNumber(num1, num2);
			/*absonum1=num1.toString();
			absonum2=num2.toString();
			
			System.out.println(absonum1);
			System.out.println(absonum2);*/
			
			
			MinusBigInteger(num1, num2, result);
			
			String hello=result.toString();
			System.out.print("result:");
			System.out.println(hello);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}

	private static void GetBigInteger(StringBuffer num1, StringBuffer num2, StringBuffer oper, String input){
		//수식을 피연산자와 연산자로 바꾼다
		int len=input.length();
		int temp=0;
		
		for(int i=1; i<len; i++){//처음에 +와 같은 부호가 오는 경우를 배제하기 위해 1번째 문자부터 읽는다	
			if(input.charAt(i)=='+' || input.charAt(i)=='-' || input.charAt(i)=='*'){
				//연산자를 만나면 oper에 저장하고 나간다 
				oper.insert(0, input.charAt(i));
				temp=i;
				break;
				
			}
		}
		
		for(int i=0; i<temp; i++){
			//연산자가 나오기 전까지 문자는 첫번째 입력값들이다
			num1.insert(i, input.charAt(i));
		}
		
		for(int i=temp+1; i<len; i++){
			//연산자 다음부터는 num2의 값들이다
			num2.insert(i-(temp+1), input.charAt(i));
		}
		
	}
	
	private static void MakeNumberOnlyString(StringBuffer num){
		//부호를 제거한 완전한 숫자만의 문자열로 만든다. 나중에 안정적으로 다루기 위함
		//부호가 있을경우 부호를 떼어낸다
		if(num.charAt(0)=='+' || num.charAt(0)=='-')
			num.deleteCharAt(0);
		
		//부호가 없는 경우 아무것도 하지 않고 종료한다
		return;
	}
	
	private static int BiggerNum(StringBuffer num1, StringBuffer num2){
		//두 수가 같으면 2, num1이 크면 1, num2가 크면 0을 리턴하는 함수 
		//인자들은 이미 부호를 제거한 상태이므로 숫자만 다룬다
		int len1=num1.length();
		int len2=num2.length();
		
		if(len1>len2)//절대값이므로 길이가 길면 큰수이다
			return 1;
		else if(len1<len2)
			return 0;
		else{
			
			for(int i=0; i<len1; i++){
				
				if(num1.charAt(i)!=num2.charAt(i)){//각 자릿수를 비교하여 숫자가 달라지면
					
					if(num1.charAt(i)>num2.charAt(i))//num1의 숫자가 더 크면 num1이 더 큰수
						return 1;
					else//그렇지 않은 경우 num2가 더 큰수
						return 0;
						
				}
				
			}
			//만일 위의 반복문을 통과하면 모든 숫자가 같으므로 같은 숫자이다
			return 2;
		}
			
	}
	
	private static void ChangeNumber(StringBuffer num1, StringBuffer num2){
		
		if(BiggerNum(num1, num2)==0){
			
			String containNum1=num1.toString();
			String containNum2=num2.toString();
			
			num1.delete(0, containNum1.length());
			num2.delete(0, containNum2.length());
			
			num1.append(containNum2, 0, containNum2.length());
			num2.append(containNum1, 0, containNum1.length());
			
		}
		
	} 
	
	private static void MakeResult(int[] temp, StringBuffer result, int start, int end){
		//tempString과 result를 이용해 출력할 result문자열을 완성한다.
		//start와 end를 이용해서 tempString에 어디서부터 어디까지 복사할 유효한 숫자가 있는지 알 수 있다
		
		int cnt=0;
		
		for(int i=0; i<=end; i++){
			
			if(temp[i]==0)
				cnt++;//0의 갯수
		}
		
		if(cnt==end+1){//전부 0이면
			
			result.insert(0, (char)48);
			//result.insert(1, '\0');
		}
		else{
			
			if(start!=0){
				
				for(int i=start; i<=end; ++i){
					//아스키코드로 변환
					result.insert(i-start, (char)(temp[i]+48));
				}
			}
			else{
				
				for(int i=start; i<=end; i++){
					
					result.insert(i, (char)(temp[i]+48));
				}
			}
		}
		System.out.print("MakeResult:");
		System.out.println(result);
	}//MakeResult
	
	private static void PlusBigInteger(StringBuffer num1, StringBuffer num2, StringBuffer result){
		//num1과 num2를 받아서 더하는 연산을 실행한다
		int carry=0;
		
		//num1이 num2보다 항상 큰 수여야 한다
		if(BiggerNum(num1, num2)==0){//num1보다 num2가 더 크면 두 수를 바꾼다
			
			String containNum1=num1.toString();
			String containNum2=num2.toString();
			
			num1.delete(0, containNum1.length());
			num2.delete(0, containNum2.length());
			
			num1.append(containNum2, 0, containNum2.length());
			num2.append(containNum1, 0, containNum1.length());
			
		}
		
		int top=num1.length();
		int low=num2.length();
		
		int differ=top-low;
		
		//자릿수마다 계산한 값을 임시적으로 넣는다 
		int[] temp=new int[120];
		
		for(int i=top; i>(top-low); --i){
			//합을 계산한다
			//합은 많으면 한자리가 더 커지므로 index의 값이 top인 곳부터 값을 저장한다
			temp[i]=((num1.charAt(i-1)+num2.charAt(i-differ-1)+carry)%48);
			
			if(temp[i]>=10){
				//합이  10보다 같거나 크면
				temp[i]=temp[i]%10;
				carry=1;
		
			}
			else{
				//합이 10보다 작으면 그대로 저장
				carry=0;
			}
		}
		
		if(differ!=0){//두 수가 자릿수가 다르면
			//num1만 있는 자릿수를 계산하는 과정
			for(int i=differ; i>0; i--){
				
				temp[i]=(num1.charAt(i-1)+carry)%48;
				
				if(temp[i]>=10){
					//만일 두수의 합이 10보다 클 경우 
					temp[i]=temp[i]%10;
					carry=1;
				}
				else{
					carry=0;
				}
			}
		}
		else{
			//같은 자릿수이면 
			temp[0]=0;
		}
		
		if(carry==1){
			//마지막 carry가 1이면
			//가장 앞자리가 1
			temp[0]=1;
			MakeResult(temp, result, 0, top);
		}
		else{
			
			MakeResult(temp, result, 1, top);
		}
		
	}
	
	private static void MinusBigInteger(StringBuffer num1, StringBuffer num2, StringBuffer result){
		//num1과 num2를 받아 빼는 연산을 시행한다
		
		int temp[]=new int[120];
		
		//num1이 num2보다 항상 더 큰 수여야 한다
		if(BiggerNum(num1, num2)==0){//num1보다 num2가 더 크면 두 수를 바꾼다
			
			String containNum1=num1.toString();
			String containNum2=num2.toString();
			
			num1.delete(0, containNum1.length());
			num2.delete(0, containNum2.length());
			
			num1.append(containNum2, 0, containNum2.length());
			num2.append(containNum1, 0, containNum1.length());
			
		}
		
		int top=num1.length();
		int low=num2.length();
		
		int differ=top-low;
		
		for(int i=top-1; i>=(top-low); i--){
			
			if(num1.charAt(i)>=num2.charAt(i-differ)){
				//borrow없이도 뺄셈이 가능할때
				temp[i]=(num1.charAt(i)-num2.charAt(i-differ))%48;
			}
			else{
				
				char tempContainer=num1.charAt(i-1);
				
				//System.out.printf("this is tempcontainer:'%c'=%d\n", tempContainer, (int)tempContainer);
				
				num1.deleteCharAt(i-1);
				
				//System.out.printf("tempContainer-1:'%c'=%d\n", tempContainer-1, (int)(tempContainer-1));
				
				num1.insert(i-1, (char)(tempContainer-1));
				
				//System.out.printf("num1.charAt(%d):'%c'=%d\n", i-1, num1.charAt(i-1), (int)num1.charAt(i-1));
				
				borrow=10;
				
				//System.out.printf("num1.charAt(%d):'%c'=%d, num2.charAt(%d):'%c'=%d\n", 
						//i, num1.charAt(i), (int)num1.charAt(i), i-differ, num2.charAt(i-differ), (int)num2.charAt(i-differ));
				
				temp[i]=(num1.charAt(i)-num2.charAt(i-differ)+10)%48;
				
				//System.out.printf("temp[%d]:%d\n", i, temp[i]);
			}
		}
		
		for(int i=0; i<top-low; ++i){
			
			temp[i]=(num1.charAt(i))%48;
		}
		
		MakeResult(temp, result, 0, top-1);
		TruncZero(result);
	}
	
	private static void MultiBigInteger(StringBuffer num1, StringBuffer num2, StringBuffer result){
		//num1과 num2를 받아 곱하는 연산을 실행한다
		int carry=0;
		int cnt=0, tmp=0;
		int temp[]=new int[240];
		
		//num1이 num2보다 항상 더 큰수여야 한다
		if(BiggerNum(num1, num2)==0){//num1보다 num2가 더 크면 두 수를 바꾼다
			
			String containNum1=num1.toString();
			String containNum2=num2.toString();
			
			num1.delete(0, containNum1.length());
			num2.delete(0, containNum2.length());
			
			num1.append(containNum2, 0, containNum2.length());
			num2.append(containNum1, 0, containNum1.length());
			
		}
		
		int top=num1.length();
		int low=num2.length();
		
		//곱셈을 쉽게 하기 위해 역순으로 바꾼다
		num1=num1.reverse();
		num2=num2.reverse();
		
		for(int i=0; i<top; ++i){
			
			if(low==1){//한자리수이면
				
				for(int j=0; j<low; ++j){
					
					tmp=(num1.charAt(i)-48)*(num2.charAt(j)-48)+carry+temp[i+j];
					
					temp[i+j]=tmp%10;
					carry=tmp/10;
				}
			}
			else{
				
				if(cnt==low){
					carry=0;
					cnt=0;
				}
				
				for(int j=0; j<low; j++){
					tmp=(num1.charAt(i)-48)*(num2.charAt(j)-48)+carry+temp[i+j];
					
					temp[i+j]=tmp%10;
					carry=tmp/10;
					cnt++;
				}
				
				if(carry!=0){
					temp[i+low]=carry;
				}
			}
			
		}//for
		
		if(carry!=0){
			
			temp[top+low-1]=carry;
			MakeResult(temp, result, 0, top+low-1);
			result=result.reverse();
		}
		else{
			
			MakeResult(temp, result, 0, top+low-2);
			result=result.reverse();
		}
	}
	
	private static void TruncZero(StringBuffer result){
		
		int i=0;
		int cnt=0;
		
		while(result.charAt(i)=='0'){
			cnt++;
			i++;
		}
		
		//맨 앞에 있는 0을 전부 자른다
		if(cnt>=1){
			result.delete(0, cnt-1);
		}
	}
}
